import os
import logging
import asyncio
from contextlib import asynccontextmanager
from typing import Dict, List, Any

from fastapi import FastAPI, HTTPException, Query, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse, JSONResponse
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.exceptions import RequestValidationError
from fastapi.encoders import jsonable_encoder
import uvicorn

from .core import ScheduleManager

logging.basicConfig(
    level=getattr(logging, os.getenv("LOG_LEVEL", "INFO").upper()),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("logs/app.log") if os.path.exists("logs") else logging.NullHandler(),
    ]
)

logger = logging.getLogger(__name__)

schedule_manager = ScheduleManager()


@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Schedule Manager")
    os.makedirs("logs", exist_ok=True)
    
    try:
        await asyncio.get_event_loop().run_in_executor(None, schedule_manager.load_data)
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        if hasattr(schedule_manager, 'get_statistics'):
            stats = schedule_manager.get_statistics()
            if stats:
                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.get('total_days', 0)} –¥–Ω–µ–π, {stats.get('total_timeslots', 0)} —Å–ª–æ—Ç–æ–≤")
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        logger.info("üìù –î–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ API")
    
    yield
    logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Schedule Manager")


app = FastAPI(
    title="Schedule Manager API",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan,
    contact={
        "name": "TriasByte",
        "email": "triasfreelance@gmail.com",
    },
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=os.getenv("CORS_ORIGINS", "*").split(","),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=os.getenv("ALLOWED_HOSTS", "*").split(",")
)

app.add_middleware(GZipMiddleware, minimum_size=1000)


# ==========================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
# ==========================================

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ FastAPI (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 422)."""
    logger.warning(f"Validation error: {exc}")
    return JSONResponse(
        status_code=422,
        content=jsonable_encoder({
            "detail": exc.errors(),
            "type": "validation_error",
            "message": "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"
        })
    )


@app.exception_handler(RuntimeError)
async def runtime_error_handler(request: Request, exc: RuntimeError):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ RuntimeError (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500)."""
    logger.error(f"Runtime error: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(exc)}", "type": "runtime_error"}
    )


@app.exception_handler(ValueError)
async def value_error_handler(request: Request, exc: ValueError):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ValueError (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 400)."""
    logger.warning(f"Value error: {exc}")
    return JSONResponse(
        status_code=400,
        content={"detail": str(exc), "type": "validation_error"}
    )


@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTPException."""
    logger.warning(f"HTTP exception: {exc.status_code} - {exc.detail}")
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail, "type": "http_error"}
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    logger.error(f"Unexpected error: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "type": "internal_error"}
    )


@app.get("/", include_in_schema=False)
async def root():
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é."""
    return RedirectResponse(url="/docs")


@app.get("/health")
async def health_check():
    try:
        health_data = {
            "status": "healthy",
            "service": "schedule-manager",
            "version": "1.0.0",
            "optimization": "interval-tree",
            "data_loaded": len(schedule_manager.days) > 0,
            "total_days": len(schedule_manager.days),
            "total_timeslots": len(schedule_manager.timeslots)
        }

        if hasattr(schedule_manager, 'get_statistics'):
            stats = schedule_manager.get_statistics()
            if stats:
                health_data.update({
                    "indexed_dates": stats.get("indexed_dates", 0),
                    "trees_count": len(schedule_manager.interval_trees),
                    "performance_optimization": "interval-tree-active"
                })
        
        return health_data
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "service": "schedule-manager", 
                "error": str(e)
            }
        )


@app.get("/api/v1/data")
async def get_data():
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è—Ö –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö.
    """
    try:
        if not schedule_manager.days:
            raise HTTPException(
                status_code=404, 
                detail="–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/v1/reload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
            )
        
        return {
            "days": [day.to_dict() for day in schedule_manager.days],
            "timeslots": [slot.to_dict() for slot in schedule_manager.timeslots],
            "summary": {
                "total_days": len(schedule_manager.days),
                "total_timeslots": len(schedule_manager.timeslots),
                "date_range": {
                    "start": min(day.date.strftime('%Y-%m-%d') for day in schedule_manager.days) if schedule_manager.days else None,
                    "end": max(day.date.strftime('%Y-%m-%d') for day in schedule_manager.days) if schedule_manager.days else None
                },
                "optimization_active": True
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@app.post("/api/v1/reload")
async def reload_data():
    """
    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
    
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã.
    """
    try:
        await asyncio.get_event_loop().run_in_executor(None, schedule_manager.load_data)
        
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        response_data = {
            "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã",
            "timestamp": "2024-10-10T12:00:00Z",  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å datetime.utcnow()
            "summary": {
                "total_days": len(schedule_manager.days),
                "total_timeslots": len(schedule_manager.timeslots),
                "indexed_dates": len(schedule_manager.interval_trees)
            }
        }
        
        if hasattr(schedule_manager, 'get_statistics'):
            stats = schedule_manager.get_statistics()
            if stats:
                response_data["performance"] = {
                    "trees_built": len(schedule_manager.interval_trees),
                    "optimization_status": "active"
                }
        
        return response_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@app.post("/api/v1/data")
async def set_data(data: Dict[str, Any]):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é.
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        if not isinstance(data, dict):
            raise HTTPException(
                status_code=400,
                detail="–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º JSON"
            )
        
        if 'days' not in data:
            raise HTTPException(
                status_code=400,
                detail="–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'days'"
            )
        
        if 'timeslots' not in data:
            raise HTTPException(
                status_code=400,
                detail="–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á 'timeslots'"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data['days'], list):
            raise HTTPException(
                status_code=400,
                detail="'days' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
            )
        
        if not isinstance(data['timeslots'], list):
            raise HTTPException(
                status_code=400,
                detail="'timeslots' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
            )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.get_event_loop().run_in_executor(
            None, schedule_manager.set_data, data['days'], data['timeslots']
        )
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {len(data['days'])} –¥–Ω–µ–π, {len(data['timeslots'])} —Å–ª–æ—Ç–æ–≤")
        
        return {
            "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω—ã",
            "summary": {
                "total_days": len(schedule_manager.days),
                "total_timeslots": len(schedule_manager.timeslots),
                "interval_trees_built": len(schedule_manager.interval_trees)
            },
            "optimization": {
                "status": "active",
                "type": "interval-tree"
            }
        }
        
    except HTTPException:
        raise
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@app.get("/api/v1/busy/{date}")
async def get_busy_intervals(date: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
    """
    try:
        intervals = schedule_manager.get_busy_intervals(date)
        
        return {
            "date": date,
            "busy_intervals": intervals,
            "count": len(intervals),
            "working_day": True,
            "optimization": "interval-tree"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –¥–ª—è {date}: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/free/{date}")
async def get_free_time(date: str):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
    """
    try:
        intervals = schedule_manager.get_free_time(date)

        total_free_minutes = 0
        for start_str, end_str in intervals:
            start_time = schedule_manager._parse_time(start_str)
            end_time = schedule_manager._parse_time(end_str)
            duration = schedule_manager._time_to_minutes(end_time) - schedule_manager._time_to_minutes(start_time)
            total_free_minutes += duration
        
        return {
            "date": date,
            "free_intervals": intervals,
            "count": len(intervals),
            "total_free_hours": total_free_minutes / 60,
            "optimization": "interval-tree"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {date}: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/available/{date}")
async def check_availability(
    date: str, 
    start_time: str = Query(..., description="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM"),
    end_time: str = Query(..., description="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.
    """
    try:
        is_available = schedule_manager.is_time_available(date, start_time, end_time)
        
        response_data = {
            "date": date,
            "start_time": start_time,
            "end_time": end_time,
            "available": is_available,
            "message": "–í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" if is_available else "–í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ",
            "optimization": "interval-tree-search"
        }
        
        if not is_available:
            try:
                free_intervals = schedule_manager.get_free_time(date)
                nearby_slots = []
                
                for free_start, free_end in free_intervals:
                    nearby_slots.append({
                        "start": free_start,
                        "end": free_end
                    })
                
                response_data["suggestions"] = {
                    "message": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏:",
                    "free_slots": nearby_slots[:5]
                }
                
            except Exception:
                pass  
        
        return response_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è {date} {start_time}-{end_time}: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/find-slot/{date}")
async def find_free_slot(
    date: str,
    duration_minutes: int = Query(..., description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö", gt=0)
):
    """
    –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    try:
        start_time = schedule_manager.find_free_slot(date, duration_minutes)
        
        response_data = {
            "date": date,
            "duration_minutes": duration_minutes,
            "duration_hours": duration_minutes / 60,
            "found": start_time is not None,
            "optimization": "interval-tree"
        }
        
        if start_time:
            start_obj = schedule_manager._parse_time(start_time)
            end_minutes = schedule_manager._time_to_minutes(start_obj) + duration_minutes
            end_time = schedule_manager._minutes_to_time(end_minutes).strftime('%H:%M')
            
            response_data.update({
                "slot": {
                    "start_time": start_time,
                    "end_time": end_time,
                    "duration_minutes": duration_minutes
                },
                "message": f"–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç —Å {start_time} –¥–æ {end_time}"
            })
        else:
            try:
                free_intervals = schedule_manager.get_free_time(date)
                alternatives = []
                
                for free_start, free_end in free_intervals:
                    start_obj = schedule_manager._parse_time(free_start)
                    end_obj = schedule_manager._parse_time(free_end)
                    available_duration = schedule_manager._time_to_minutes(end_obj) - schedule_manager._time_to_minutes(start_obj)
                    
                    alternatives.append({
                        "start": free_start,
                        "end": free_end,
                        "available_minutes": available_duration,
                        "available_hours": available_duration / 60
                    })
                
                response_data.update({
                    "message": f"–°–ª–æ—Ç –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "alternatives": {
                        "message": "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏:",
                        "slots": alternatives
                    }
                })
                
            except Exception:
                response_data["message"] = f"–°–ª–æ—Ç –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        return response_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–∞ –¥–ª—è {date} –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç: {e}")
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/v1/stats")
async def get_statistics():
    """
    üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–µ—Ä–µ–≤—å–µ–≤
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫—ç—à–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    """
    try:
        base_stats = {
            "data_summary": {
                "total_days": len(schedule_manager.days),
                "total_timeslots": len(schedule_manager.timeslots),
                "indexed_dates": len(schedule_manager.interval_trees),
                "trees_active": len(schedule_manager.interval_trees) > 0
            },
            "optimization": {
                "type": "interval-tree",
                "status": "active",
                "complexity": {
                    "search": "O(log n)",
                    "insert": "O(log n)", 
                    "query": "O(k) where k = slots per day"
                }
            }
        }
        
        if hasattr(schedule_manager, 'get_statistics'):
            extended_stats = schedule_manager.get_statistics()
            if extended_stats:
                base_stats.update(extended_stats)
        
        if schedule_manager.interval_trees:
            tree_info = {}
            for date, tree in list(schedule_manager.interval_trees.items())[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –¥–∞—Ç
                tree_info[date] = {
                    "size": tree.size,
                    "empty": tree.is_empty()
                }
            
            base_stats["trees_sample"] = tree_info
            base_stats["trees_total"] = len(schedule_manager.interval_trees)
        
        return base_stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


# ==========================================
# Legacy endpoints (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# ==========================================

@app.get("/busy/{date}")
async def get_busy_intervals_v1(date: str):
    return await get_busy_intervals(date)


@app.get("/free/{date}")
async def get_free_time_v1(date: str):
    return await get_free_time(date)


@app.get("/available/{date}")
async def check_availability_v1(date: str, start_time: str, end_time: str):
    return await check_availability(date, start_time, end_time)


@app.get("/find-slot/{date}")
async def find_free_slot_v1(date: str, duration_minutes: int):
    return await find_free_slot(date, duration_minutes)


def main():
    os.makedirs("logs", exist_ok=True)
    
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8000"))
    log_level = os.getenv("LOG_LEVEL", "info")
    reload = os.getenv("RELOAD", "false").lower() == "true"
    workers = int(os.getenv("WORKERS", "1"))
    
    logger.info(f"–ó–∞–ø—É—Å–∫ Schedule Manager")
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: host={host}, port={port}, log_level={log_level}")
    
    if reload:
        logger.info("üîÑ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: hot-reload –≤–∫–ª—é—á–µ–Ω")
        
    uvicorn.run(
        "schedule_manager.main:app",
        host=host,
        port=port,
        log_level=log_level,
        reload=reload,
        workers=workers if not reload else 1,
        access_log=True,
        loop="auto"
    )


if __name__ == "__main__":
    main()