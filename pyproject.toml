[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "schedule-manager"
version = "1.0.0"
readme = "README.md"
requires-python = ">=3.8"
keywords = [
    "schedule", 
    "calendar", 
    "fastapi", 
    "api", 
    "interval-tree", 
    "red-black-tree", 
    "optimization",
    "time-management",
    "booking-system",
    "slot-management"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Typing :: Typed"
]

dependencies = [
    "fastapi>=0.104.1,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0", 
    "requests>=2.31.0,<3.0.0",
    "pydantic>=2.0.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",  # Для тестирования FastAPI
    
    # Code Quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.14.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    
    # Development Tools
    "pre-commit>=3.4.0",
    "watchdog>=3.0.0",  # Для file watching
    "rich>=13.0.0",     # Для красивого вывода
    
    # Performance Testing
    "locust>=2.17.0",   # Для load testing
    "memory-profiler>=0.61.0",
    "line-profiler>=4.0.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "pytest-benchmark>=4.0.0",  # Для performance тестов
    "faker>=19.0.0",            # Для генерации тестовых данных
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
    "pymdown-extensions>=10.0.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

monitoring = [
    "prometheus-client>=0.17.0",
    "structlog>=23.0.0",
    "sentry-sdk[fastapi]>=1.32.0",
]

performance = [
    "uvloop>=0.17.0; sys_platform != 'win32'",  # Faster event loop
    "orjson>=3.9.0",                            # Faster JSON
    "python-multipart>=0.0.6",                  # Form data parsing
]

all = [
    "schedule-manager[dev,test,docs,monitoring,performance]"
]

[project.urls]
Homepage = "https://github.com/example/schedule-manager"
Documentation = "https://schedule-manager.readthedocs.io"
Repository = "https://github.com/example/schedule-manager"
"Bug Tracker" = "https://github.com/example/schedule-manager/issues"
Changelog = "https://github.com/example/schedule-manager/blob/main/CHANGELOG.md"

[project.scripts]
schedule-manager = "schedule_manager.main:main"
schedule-benchmark = "schedule_manager.benchmark:main"

[tool.uv]
dev-dependencies = [
    # Core development tools
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0", 
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    
    # Code formatting and linting
    "black>=23.0.0",
    "isort>=5.12.0", 
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    
    # Development utilities
    "pre-commit>=3.4.0",
    "rich>=13.0.0",
    "watchdog>=3.0.0",
    
    # Performance analysis
    "locust>=2.17.0",
    "memory-profiler>=0.61.0",
]

[tool.hatch.version]
path = "schedule_manager/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["schedule_manager"]
exclude = [
    "tests/",
    "docs/",
    "benchmarks/",
    ".github/",
]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/.vscode", 
    "/docs",
    "/tests",
    "/benchmarks",
    "/.pre-commit-config.yaml",
]

# ==========================================
# Code Quality Tools Configuration
# ==========================================

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?

extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
known_first_party = ["schedule_manager"]
known_third_party = ["fastapi", "uvicorn", "requests", "pydantic"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "locust.*",
    "memory_profiler.*",
    "line_profiler.*"
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
    "E501",  # line too long (handled by black)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist", 
    ".venv",
    ".tox",
    "*.egg-info"
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:D",         # missing docstrings in tests
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (handled by context)

# ==========================================
# Testing Configuration
# ==========================================

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=schedule_manager",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=85",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "performance: marks tests as performance tests",
    "interval_tree: marks tests specific to interval tree functionality",
    "api: marks tests for API endpoints",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["schedule_manager"]
omit = [
    "*/tests/*",
    "*/test_*.py", 
    "*/__main__.py",
    "*/benchmarks/*",
    "*/conftest.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# ==========================================
# Performance and Monitoring
# ==========================================

[tool.locust]
# Configuration for load testing
host = "http://localhost:8000"
users = 100
spawn-rate = 10
run-time = "5m"

# ==========================================
# Development Scripts
# ==========================================

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "httpx",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov-html = [
  "- coverage combine", 
  "coverage html",
]
lint = [
  "flake8 {args:schedule_manager tests}",
  "black --check --diff {args:schedule_manager tests}",
  "isort --check-only --diff {args:schedule_manager tests}",
]
format = [
  "black {args:schedule_manager tests}",
  "isort {args:schedule_manager tests}",
]
type-check = "mypy {args:schedule_manager tests}"
security = "bandit -r schedule_manager"
all-checks = [
  "lint",
  "type-check", 
  "security",
  "test-cov",
]

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs>=1.5.0",
  "mkdocs-material>=9.2.0",
  "mkdocstrings[python]>=0.22.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8001"
deploy = "mkdocs gh-deploy --force"

[tool.hatch.envs.performance]
dependencies = [
  "locust>=2.17.0",
  "memory-profiler>=0.61.0",
  "line-profiler>=4.0.0",
  "py-spy>=0.3.14",
]

[tool.hatch.envs.performance.scripts]
benchmark = "python -m schedule_manager.benchmark"
load-test = "locust -f tests/load_test.py"
profile-memory = "mprof run python -m schedule_manager.main"
profile-line = "kernprof -l -v python -m schedule_manager.main"

[project.optional-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--cov=schedule_manager",
    "--cov-report=term-missing"
]